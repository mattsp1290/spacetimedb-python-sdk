# SpacetimeDB Python SDK - Fix Circular Import Tasks
# 
# This file contains tasks to resolve the circular import issue between
# connection_builder.py, connection_pool.py, and test_fixtures.py
#
# Root cause: Circular dependency chain:
# __init__.py -> test_fixtures -> connection_builder -> connection_pool -> connection_builder

version: '1.0'
project: spacetimedb-python-sdk-circular-import-fix
priority: critical
estimated_duration: 4_hours

overview: |
  The SpacetimeDB Python SDK has a circular import issue preventing it from being imported.
  The circular dependency exists between connection_builder.py and connection_pool.py,
  and is exposed when __init__.py imports test_fixtures.py.
  
  Error: ImportError: cannot import name 'SpacetimeDBConnectionBuilder' from partially 
  initialized module 'spacetimedb_sdk.connection_builder'

tasks:
  - id: analyze-circular-dependency
    title: "Analyze and Document Circular Dependencies"
    description: |
      Thoroughly analyze the import dependencies to understand the full scope of the issue.
    subtasks:
      - Examine connection_pool.py to confirm it imports SpacetimeDBConnectionBuilder
      - Document all import cycles in the codebase
      - Identify which imports are type-only vs runtime requirements
    estimated_duration: 30_minutes
    priority: high

  - id: create-types-module
    title: "Create Shared Types Module"
    description: |
      Create a new module to hold shared types and interfaces that both 
      connection_builder and connection_pool need.
    implementation:
      - Create src/spacetimedb_sdk/shared_types.py
      - Move shared type definitions from connection_builder to shared_types
      - Update both connection_builder and connection_pool to import from shared_types
    files_to_create:
      - src/spacetimedb_sdk/shared_types.py
    files_to_modify:
      - src/spacetimedb_sdk/connection_builder.py
      - src/spacetimedb_sdk/connection_pool.py
    estimated_duration: 45_minutes
    priority: critical

  - id: fix-connection-pool-imports
    title: "Fix Connection Pool Imports"
    description: |
      Refactor connection_pool.py to avoid importing SpacetimeDBConnectionBuilder directly.
    implementation:
      - Use TYPE_CHECKING for type-only imports
      - Use string annotations for forward references
      - Consider dependency injection pattern if needed
    code_changes: |
      # In connection_pool.py
      from typing import TYPE_CHECKING
      
      if TYPE_CHECKING:
          from .connection_builder import SpacetimeDBConnectionBuilder
      
      # Use string annotations for type hints
      def method_using_builder(self, builder: 'SpacetimeDBConnectionBuilder'):
          pass
    files_to_modify:
      - src/spacetimedb_sdk/connection_pool.py
    estimated_duration: 30_minutes
    priority: critical

  - id: remove-test-fixtures-from-init
    title: "Remove test_fixtures from Main Package Imports"
    description: |
      Test fixtures should not be imported in the main package __init__.py.
      They should only be imported when running tests.
    implementation:
      - Remove test_fixtures import from __init__.py
      - Remove related exports from __all__
      - Ensure test_fixtures can still be imported directly when needed
    files_to_modify:
      - src/spacetimedb_sdk/__init__.py
    estimated_duration: 15_minutes
    priority: high

  - id: lazy-import-pattern
    title: "Implement Lazy Import Pattern Where Necessary"
    description: |
      For any remaining circular dependencies, implement lazy imports.
    implementation:
      - Identify functions/methods that need imports
      - Move imports inside those functions
      - Document why lazy import is needed with comments
    example: |
      def build_pool(self) -> 'ConnectionPool':
          # Lazy import to avoid circular dependency
          from .connection_pool import ConnectionPool
          return ConnectionPool(...)
    files_to_modify:
      - src/spacetimedb_sdk/connection_builder.py
    estimated_duration: 30_minutes
    priority: medium

  - id: create-test-package
    title: "Move Test Fixtures to Separate Test Package"
    description: |
      Create a proper test package structure to isolate test utilities.
    implementation:
      - Create src/spacetimedb_sdk/testing/__init__.py
      - Move test_fixtures.py content to testing package
      - Update imports in test files
    files_to_create:
      - src/spacetimedb_sdk/testing/__init__.py
      - src/spacetimedb_sdk/testing/fixtures.py
    files_to_move:
      - src/spacetimedb_sdk/test_fixtures.py -> src/spacetimedb_sdk/testing/fixtures.py
    estimated_duration: 30_minutes
    priority: medium

  - id: validate-imports
    title: "Validate All Import Paths"
    description: |
      Ensure all imports work correctly after refactoring.
    validation_steps:
      - Test basic import: `import spacetimedb_sdk`
      - Test specific imports: `from spacetimedb_sdk import SpacetimeDBClient`
      - Test builder pattern: `SpacetimeDBClient.builder()`
      - Run existing test suite
    test_script: |
      #!/usr/bin/env python3
      # validation_test.py
      
      print("Testing basic import...")
      import spacetimedb_sdk
      print("✓ Basic import successful")
      
      print("\nTesting specific imports...")
      from spacetimedb_sdk import SpacetimeDBClient, SpacetimeDBConnectionBuilder
      print("✓ Specific imports successful")
      
      print("\nTesting builder pattern...")
      builder = SpacetimeDBClient.builder()
      print("✓ Builder pattern works")
      
      print("\nAll import tests passed!")
    estimated_duration: 30_minutes
    priority: critical

  - id: update-documentation
    title: "Update Documentation and Examples"
    description: |
      Update any documentation or examples affected by the refactoring.
    files_to_update:
      - README.md (if it has import examples)
      - Any example files using test_fixtures
      - API documentation
    estimated_duration: 20_minutes
    priority: low

testing_strategy:
  - Run validation script after each major change
  - Test in isolated virtual environment
  - Verify no regression in existing functionality
  - Test both sync and async import patterns

rollback_plan:
  - Keep backup of original files
  - Use git branches for changes
  - Test thoroughly before merging

success_criteria:
  - `import spacetimedb_sdk` works without errors
  - All existing tests pass
  - No circular import warnings/errors
  - Connection builder pattern works correctly
  - Test fixtures can still be imported for testing (from testing subpackage)

notes: |
  This is a critical fix as it completely blocks usage of the SDK.
  The issue stems from poor separation of concerns between runtime code
  and test utilities. The fix involves proper modularization and 
  following Python best practices for avoiding circular imports.
